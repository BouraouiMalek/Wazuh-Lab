#!/usr/bin/env python3
import nmap
import time
import json
import platform

def scan_subnet(subnet):
    nm = nmap.PortScanner()
    nm.scan(subnet)
    results = []

    for host in nm.all_hosts():
        for proto in nm[host].all_protocols():
            if proto not in ["tcp", "udp"]:
                continue
            for port in sorted(nm[host][proto].keys()):
                json_output = {
                    'nmap_host': host,
                    'nmap_protocol': proto,
                    'nmap_port': port,
                    'nmap_hostname': "",
                    'nmap_hostname_type': "",
                    'nmap_port_name': "",
                    'nmap_port_state': "",
                    'nmap_port_service': ""
                }

                if nm[host]["hostnames"]:
                    json_output['nmap_hostname'] = nm[host]["hostnames"][0]["name"]
                    json_output['nmap_hostname_type'] = nm[host]["hostnames"][0]["type"]

                if 'name' in nm[host][proto][port]:
                    json_output['nmap_port_name'] = nm[host][proto][port]['name']

                if 'state' in nm[host][proto][port]:
                    json_output['nmap_port_state'] = nm[host][proto][port]['state']

                if 'product' in nm[host][proto][port] and 'version' in nm[host][proto][port]:
                    json_output['nmap_port_service'] = nm[host][proto][port]['product'] + " " + nm[host][proto][port]['version']

                results.append(json_output)
    return results

def append_to_log(results, log_file):
    with open(log_file, "a") as f:
        for result in results:
            f.write(json.dumps(result) + "\n")

subnets = ['127.0.0.1']

if platform.system() == 'Windows':
    log_file = r"C:\Program Files (x86)\ossec-agent\active-response\active-responses.log"
elif platform.system() == 'Linux':
    log_file = "/var/ossec/logs/active-responses.log"
else:
    log_file = "/Library/Ossec/logs/active-responses.log"

for subnet in subnets:
    results = scan_subnet(subnet)
    append_to_log(results, log_file)
    time.sleep(2)
